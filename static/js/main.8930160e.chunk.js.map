{"version":3,"sources":["components/contactForm.js","App.js","serviceWorker.js","index.js"],"names":["ContactUs","className","onSubmit","e","preventDefault","emailjs","sendForm","target","then","result","console","log","text","error","reset","type","placeholder","name","id","cols","rows","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"+OAGe,SAASA,IAcpB,OACI,8BACI,qBAAKC,UAAU,YAAf,SACA,sBAAMC,SAfd,SAAmBC,GACfA,EAAEC,iBAENC,IAAQC,SAAS,kBAAmB,mBAAoBH,EAAEI,OAAQ,8BAC7DC,MAAK,SAACC,GACHC,QAAQC,IAAIF,EAAOG,SACpB,SAACC,GACAH,QAAQC,IAAIE,EAAMD,SAEtBT,EAAEI,OAAOO,SAML,SACQ,sBAAKb,UAAU,mBAAf,UACI,qBAAKA,UAAU,2BAAf,SACI,uBAAOc,KAAK,OAAOd,UAAU,eAAee,YAAY,OAAOC,KAAK,WAExE,qBAAKhB,UAAU,gCAAf,SACI,uBAAOc,KAAK,QAAQd,UAAU,eAAee,YAAY,gBAAgBC,KAAK,YAElF,qBAAKhB,UAAU,gCAAf,SACI,uBAAOc,KAAK,OAAOd,UAAU,eAAee,YAAY,UAAUC,KAAK,cAE3E,qBAAKhB,UAAU,gCAAf,SACI,0BAAUA,UAAU,eAAeiB,GAAG,GAAGC,KAAK,KAAKC,KAAK,IAAIJ,YAAY,eAAeC,KAAK,cAEhG,qBAAKhB,UAAU,qBAAf,SACI,uBAAOc,KAAK,SAASd,UAAU,eAAeoB,MAAM,4BCpBjEC,MAVf,WACE,OACE,qBAAKrB,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAACD,EAAD,SCGYuB,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAzB,GACLH,QAAQG,MAAMA,EAAM0B,c","file":"static/js/main.8930160e.chunk.js","sourcesContent":["import emailjs from \"emailjs-com\";\nimport React from 'react';\n\nexport default function ContactUs() {\n\n    function sendEmail(e) {\n        e.preventDefault();\n\n    emailjs.sendForm('service_cjvx5ko', 'template_3gjqon6', e.target, 'user_OrivuLJTs5Jgqya16geHD')\n        .then((result) => {\n            console.log(result.text);\n        }, (error) => {\n            console.log(error.text);\n        });\n        e.target.reset()\n    }\n\n    return(\n        <div>\n            <div className=\"container\">\n            <form onSubmit={sendEmail}>\n                    <div className=\"row pt-5 mx-auto\">\n                        <div className=\"col-8 form-group mx-auto\">\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Name\" name=\"name\"/>\n                        </div>\n                        <div className=\"col-8 form-group pt-2 mx-auto\">\n                            <input type=\"email\" className=\"form-control\" placeholder=\"Email Address\" name=\"email\"/>\n                        </div>\n                        <div className=\"col-8 form-group pt-2 mx-auto\">\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Subject\" name=\"subject\"/>\n                        </div>\n                        <div className=\"col-8 form-group pt-2 mx-auto\">\n                            <textarea className=\"form-control\" id=\"\" cols=\"30\" rows=\"8\" placeholder=\"Your message\" name=\"message\"></textarea>\n                        </div>\n                        <div className=\"col-8 pt-3 mx-auto\">\n                            <input type=\"submit\" className=\"btn btn-info\" value=\"Send Message\"></input>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport ContactUs from './components/contactForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <ContactUs/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}